x = var,
y = "DMFT Score") +
scale_fill_manual(values = risk_colors) +
theme_minimal()
ggsave(paste0("boxplot_", var, ".png"), plot = p, width = 6, height = 4)
} else {
# Continuous variable → scatter plot
p <- ggplot(training_data,
aes(x = .data[[var]],
y = total_dmft_score,
color = risk_level)) +
geom_point(size = 2, alpha = 0.7) +
labs(title = paste(var, "(Scatter) vs DMFT Score"),
x = var,
y = "DMFT Score") +
scale_color_manual(values = risk_colors) +
theme_minimal()
ggsave(paste0("scatter_", var, ".png"), plot = p, width = 6, height = 4)
}
}
library(ggplot2)
training_data <- read.csv("training_data.csv")
# Get categorical variables except the outcome
categorical_vars <- names(training_data)[sapply(training_data, is.numeric)]
categorical_vars <- setdiff(categorical_vars, "risk_level")  # optional exclusion
# Loop and plot
for (var in categorical_vars) {
p <- ggplot(training_data, aes_string(x = var,
y = "total_dmft_score",
fill = "risk_level")) +
geom_boxplot() +
labs(title = paste(var, "vs DMFT Score"),
x = var,
y = "DMFT Score") +
theme_minimal()
# Save each plot
ggsave(paste0("boxplot_", var, ".png"), plot = p, width = 6, height = 4)
}
library(dplyr)
# Identify categorical vars: factors or character
categorical_vars <- names(training_data)[sapply(training_data, function(x) is.factor(x) || is.character(x))]
summary_tables <- list()
for (var in categorical_vars) {
summary_df <- training_data %>%
group_by(across(all_of(var))) %>%
summarise(
Frequency = n(),
Min_DMFT = min(total_dmft_score, na.rm = TRUE),
Max_DMFT = max(total_dmft_score, na.rm = TRUE),
Median_DMFT = median(total_dmft_score, na.rm = TRUE),
Mean_DMFT = mean(total_dmft_score, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(across(all_of(var)))
summary_tables[[var]] <- summary_df
}
# To see summary for a particular variable, e.g. "risk_level":
print(summary_tables[["risk_level"]])
setwd("C:/Users/vhuta/Desktop/OralSmart - Data Analysis/R_Data_Analysis/scatterplots")
library(dplyr)
# Identify categorical vars: factors or character
categorical_vars <- names(training_data)[sapply(training_data, function(x) is.factor(x) || is.character(x))]
summary_tables <- list()
for (var in categorical_vars) {
summary_df <- training_data %>%
group_by(across(all_of(var))) %>%
summarise(
Frequency = n(),
Min_DMFT = min(total_dmft_score, na.rm = TRUE),
Max_DMFT = max(total_dmft_score, na.rm = TRUE),
Median_DMFT = median(total_dmft_score, na.rm = TRUE),
Mean_DMFT = mean(total_dmft_score, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(across(all_of(var)))
summary_tables[[var]] <- summary_df
}
library(ggplot2)
training_data <- read.csv("training_data.csv")
# Get numeric variables except total_dmft_score
numeric_vars <- names(training_data)[sapply(training_data, is.numeric)]
numeric_vars <- setdiff(numeric_vars, "total_dmft_score")  # exclude the outcome
# Loop and plot
for (var in numeric_vars) {
p <- ggplot(training_data, aes_string(x = var,
y = "total_dmft_score",
color = "risk_level")) +
geom_point(size = 3) +
labs(title = paste(var, "vs DMFT Score"),
x = var,
y = "DMFT Score") +
theme_minimal()
#print(p)  # shows plot
ggsave(paste0("plot_", var, ".png"), plot = p, width = 6, height = 4)
}
setwd("C:/Users/vhuta/Desktop/OralSmart - Data Analysis/R_Data_Analysis/barplots")
library(ggplot2)
# Read data
training_data <- read.csv("training_data.csv")
library(ggplot2)
# Read data
training_data <- read.csv("training_data.csv")
# Ensure risk_level is a factor with fixed order
training_data$risk_level <- factor(training_data$risk_level,
levels = c("low", "medium", "high"))
# Define consistent colors for risk levels
risk_colors <- c("low" = "#1f78b4",    # blue
"medium" = "#33a02c", # green
"high" = "#e31a1c")   # red
# Get variables to plot (excluding outcome and risk_level itself)
vars_to_plot <- setdiff(names(training_data),
c("total_dmft_score", "risk_level"))
# Loop through variables
for (var in vars_to_plot) {
# Only plot if variable has <= 10 unique values (categorical-like)
if (length(unique(training_data[[var]])) <= 10) {
p <- ggplot(training_data,
aes(x = as.factor(.data[[var]]),
fill = risk_level)) +
geom_bar(position = position_dodge(width = 0.8)) +
labs(title = paste(var, "(Barplot) by Risk Level"),
x = var,
y = "Count") +
scale_fill_manual(values = risk_colors) +
theme_minimal()
# Save image
ggsave(paste0("barplot_", var, ".png"), plot = p, width = 6, height = 4)
}
}
getwd()
setwd("C:/Users/vhuta/Desktop/OralSmart - Data Analysis/R_Data_Analysis/chi_square")
getwd()
library(dplyr)
library(ggplot2)
training_data <- read.csv("training_data.csv")
# Target variable
target_var <- "risk_level"
# Convert numeric variables with few unique values to factors (categorical)
training_data <- training_data %>%
mutate(across(where(is.numeric), ~ ifelse(length(unique(.)) <= 10, as.factor(.), .)))
# Identify categorical variables (excluding target)
categorical_vars <- setdiff(
names(training_data)[sapply(training_data, is.factor)],
target_var
)
library(gridExtra)
for (var in categorical_vars) {
# Create contingency table
tbl <- table(training_data[[var]], training_data[[target_var]])
# Perform Chi-square test
chi_res <- chisq.test(tbl)
# Prepare results text
results_text <- paste0(
"Chi-square Test: ", var, " vs ", target_var, "\n",
"Chi-sq = ", round(chi_res$statistic, 3),
", df = ", chi_res$parameter,
", p-value = ", signif(chi_res$p.value, 3)
)
# Create a plot showing observed counts
p <- ggplot(as.data.frame(tbl), aes(x = Var1, y = Freq, fill = Var2)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
title = paste("Chi-square Test:", var, "vs", target_var),
subtitle = results_text,
x = var,
y = "Count",
fill = target_var
) +
theme_minimal()
# Save the plot
ggsave(paste0("chi_square_", var, ".png"), plot = p, width = 7, height = 5)
}
# To see summary for a particular variable, e.g. "risk_level":
print(summary_tables[["risk_level"]])
library(dplyr)
library(ggplot2)
training_data <- read.csv("training_data.csv")
# Target variable
target_var <- "risk_level"
# Convert numeric variables with few unique values to factors (categorical)
training_data <- training_data %>%
mutate(across(where(is.numeric), ~ ifelse(length(unique(.)) <= 10, as.factor(.), .)))
# Identify categorical variables (excluding target)
categorical_vars <- setdiff(
names(training_data)[sapply(training_data, is.factor)],
target_var
)
library(gridExtra)
for (var in categorical_vars) {
# Create contingency table
tbl <- table(training_data[[var]], training_data[[target_var]])
# Perform Chi-square test
chi_res <- chisq.test(tbl)
# Prepare results text
results_text <- paste0(
"Chi-square Test: ", var, " vs ", target_var, "\n",
"Chi-sq = ", round(chi_res$statistic, 3),
", df = ", chi_res$parameter,
", p-value = ", signif(chi_res$p.value, 3)
)
# Create a plot showing observed counts
p <- ggplot(as.data.frame(tbl), aes(x = Var1, y = Freq, fill = Var2)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
title = paste("Chi-square Test:", var, "vs", target_var),
subtitle = results_text,
x = var,
y = "Count",
fill = target_var
) +
theme_minimal()
# Save the plot
ggsave(paste0("chi_square_", var, ".png"), plot = p, width = 7, height = 5)
}
getwd()
library(dplyr)
library(ggplot2)
training_data <- read.csv("training_data.csv")
# Target variable
target_var <- "risk_level"
# Convert numeric variables with <=10 unique values to factors
training_data <- training_data %>%
mutate(across(where(is.numeric), ~ if (n_distinct(.) <= 10) factor(.) else .))
# Identify categorical variables (excluding target)
categorical_vars <- setdiff(
names(training_data)[sapply(training_data, is.factor)],
target_var
)
library(gridExtra)
for (var in categorical_vars) {
# Create contingency table
tbl <- table(training_data[[var]], training_data[[target_var]])
# Skip if the table is degenerate (zero counts or only one category)
if (min(dim(tbl)) < 2) next
# Perform Chi-square test
chi_res <- chisq.test(tbl)
# Prepare results text
results_text <- paste0(
"Chi-square Test: ", var, " vs ", target_var, "\n",
"Chi-sq = ", round(chi_res$statistic, 3),
", df = ", chi_res$parameter,
", p-value = ", signif(chi_res$p.value, 3)
)
# Create a plot showing observed counts
p <- ggplot(as.data.frame(tbl), aes(x = Var1, y = Freq, fill = Var2)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
title = paste("Chi-square Test:", var, "vs", target_var),
subtitle = results_text,
x = var,
y = "Count",
fill = target_var
) +
theme_minimal()
# Save the plot
ggsave(paste0("chi_square_", var, ".png"), plot = p, width = 7, height = 5)
}
getwd()
setwd("C:/Users/vhuta/Desktop/OralSmart - Data Analysis/R_Data_Analysis/contingency_table")
library(ggplot2)
library(vcd)   # for assocstats
library(dplyr)
library(tidyr)
install.packages("vcd")
library(vcd)   # for assocstats
library(dplyr)
library(tidyr)
# Load data
df <- read.csv("training_data.csv")
target <- "risk_level"
# Get categorical variables
cat_vars <- names(df)[sapply(df, is.factor) | sapply(df, is.character)]
cat_vars <- setdiff(cat_vars, target)
# Loop over categorical variables
for (var in cat_vars) {
# Contingency table
tbl <- table(df[[var]], df[[target]])
# Chi-square and Cramér's V
chi <- chisq.test(tbl)
cramer_v <- assocstats(tbl)$cramer
# Convert to data frame for ggplot
tbl_df <- as.data.frame(tbl)
names(tbl_df) <- c("Var", "Target", "Count")
# Plot
p <- ggplot(tbl_df, aes(x = Target, y = Var, fill = Count)) +
geom_tile(color = "white") +
geom_text(aes(label = Count), color = "black") +
scale_fill_gradient(low = "white", high = "steelblue") +
labs(
title = paste0("Chi-square test for '", var, "' vs '", target, "'"),
subtitle = paste0(
"Chi² = ", round(chi$statistic, 2),
", df = ", chi$parameter,
", p = ", signif(chi$p.value, 4),
", Cramér's V = ", round(cramer_v, 3)
),
x = target, y = var
) +
theme_minimal()
print(p)
}
library(ggplot2)
library(vcd)   # for assocstats
library(dplyr)
library(tidyr)
# Load data
df <- read.csv("training_data.csv")
target <- "risk_level"
# Convert numerically encoded categorical variables to factors
df <- df %>%
mutate(across(where(~ is.numeric(.) && n_distinct(.) <= 10), as.factor))
# Ensure target is a factor
df[[target]] <- as.factor(df[[target]])
# Get categorical variables excluding target
cat_vars <- names(df)[sapply(df, is.factor)]
cat_vars <- setdiff(cat_vars, target)
# Loop over categorical variables
for (var in cat_vars) {
# Contingency table
tbl <- table(df[[var]], df[[target]])
# Chi-square and Cramér's V
chi <- chisq.test(tbl)
cramer_v <- assocstats(tbl)$cramer
# Convert to data frame for ggplot
tbl_df <- as.data.frame(tbl)
names(tbl_df) <- c("Var", "Target", "Count")
# Plot
p <- ggplot(tbl_df, aes(x = Target, y = Var, fill = Count)) +
geom_tile(color = "white") +
geom_text(aes(label = Count), color = "black") +
scale_fill_gradient(low = "white", high = "steelblue") +
labs(
title = paste0("Chi-square test for '", var, "' vs '", target, "'"),
subtitle = paste0(
"Chi² = ", round(chi$statistic, 2),
", df = ", chi$parameter,
", p = ", signif(chi$p.value, 4),
", Cramér's V = ", round(cramer_v, 3)
),
x = target, y = var
) +
theme_minimal()
print(p)  # Ensure it shows in loops
}
library(ggplot2)
library(vcd)   # for assocstats
library(dplyr)
library(tidyr)
# Load data
df <- read.csv("training_data.csv")
target <- "risk_level"
# Convert numerically encoded categorical variables to factors
df <- df %>%
mutate(across(where(~ is.numeric(.) && n_distinct(.) <= 10), as.factor))
# Ensure target is a factor
df[[target]] <- as.factor(df[[target]])
# Get categorical variables excluding target
cat_vars <- names(df)[sapply(df, is.factor)]
cat_vars <- setdiff(cat_vars, target)
# Open PDF to save all plots
pdf("chi_square_plots.pdf", width = 8, height = 6)
# Loop over categorical variables
for (var in cat_vars) {
# Contingency table
tbl <- table(df[[var]], df[[target]])
# Chi-square and Cramér's V
chi <- suppressWarnings(chisq.test(tbl)) # suppress warnings for small counts
cramer_v <- assocstats(tbl)$cramer
# Convert to data frame for ggplot
tbl_df <- as.data.frame(tbl)
names(tbl_df) <- c("Var", "Target", "Count")
# Stats text for annotation
stats_text <- paste0(
"Chi² = ", round(chi$statistic, 2), "\n",
"df = ", chi$parameter, "\n",
"p = ", signif(chi$p.value, 4), "\n",
"Cramér's V = ", round(cramer_v, 3)
)
# Plot
p <- ggplot(tbl_df, aes(x = Target, y = Var, fill = Count)) +
geom_tile(color = "white") +
geom_text(aes(label = Count), color = "black") +
scale_fill_gradient(low = "white", high = "steelblue") +
labs(
title = paste0("Chi-square test for '", var, "' vs '", target, "'"),
x = target, y = var
) +
theme_minimal() +
annotate("text", x = 1.5, y = Inf, label = stats_text,
hjust = 0, vjust = 1.1, size = 4, fontface = "bold",
inherit.aes = FALSE)
print(p)
}
# Close PDF
dev.off()
cat("PDF saved as chi_square_plots.pdf in your working directory.\n")
install.packages("vcd")
library(ggplot2)
library(vcd)     # For assocstats (Cramér's V)
library(dplyr)
library(tidyr)
# Load your data
df <- read.csv("training_data.csv")
target <- "risk_level"
# Convert low-cardinality numeric variables to factors
df <- df %>%
mutate(across(where(~ is.numeric(.) && n_distinct(.) <= 10), as.factor))
# Ensure target is a factor
df[[target]] <- as.factor(df[[target]])
getwd()
setwd("C:\Users\vhuta\Desktop\OralSmart - Data Analysis\R_Data_Analysis\Heatmap")
setwd("C:\Users\vhuta\Desktop\OralSmart - Data Analysis\R_Data_Analysis\Heatmap")
setwd("C:/Users/vhuta/Desktop/OralSmart - Data Analysis/R_Data_Analysis/Heatmap")
library(ggplot2)
library(vcd)     # For assocstats (Cramér's V)
library(dplyr)
library(tidyr)
# Load your data
df <- read.csv("training_data.csv")
target <- "risk_level"
# Convert low-cardinality numeric variables to factors
df <- df %>%
mutate(across(where(~ is.numeric(.) && n_distinct(.) <= 10), as.factor))
# Ensure target is a factor
df[[target]] <- as.factor(df[[target]])
# Identify categorical variables (excluding target)
cat_vars <- names(df)[sapply(df, is.factor)]
cat_vars <- setdiff(cat_vars, target)
# Open a PDF to save each heatmap on its own page
pdf("categorical_heatmaps.pdf", width = 8, height = 6)
for (var in cat_vars) {
# Contingency table
tbl <- table(df[[var]], df[[target]])
# Chi-square test & Cramér's V
chi <- suppressWarnings(chisq.test(tbl))
cramer_v <- assocstats(tbl)$cramer
# Convert to proportion table for heatmap
prop_tbl <- prop.table(tbl, margin = 1)  # proportions per row
prop_df <- as.data.frame(prop_tbl)
names(prop_df) <- c("Var", "Target", "Proportion")
# Stats annotation text
stats_text <- paste0(
"Chi² = ", round(chi$statistic, 2), "\n",
"df = ", chi$parameter, "\n",
"p = ", signif(chi$p.value, 4), "\n",
"Cramér's V = ", round(cramer_v, 3)
)
# Heatmap plot
p <- ggplot(prop_df, aes(x = Target, y = Var, fill = Proportion)) +
geom_tile(color = "white") +
geom_text(aes(label = sprintf("%.2f", Proportion)), color = "black", size = 3) +
scale_fill_gradient(low = "white", high = "steelblue") +
labs(
title = paste0("Proportional Heatmap: '", var, "' vs '", target, "'"),
x = target, y = var, fill = "Proportion"
) +
theme_minimal(base_size = 14) +
annotate("text", x = length(levels(df[[target]])) + 0.8,
y = length(levels(df[[var]])) + 0.5,
label = stats_text, hjust = 0, vjust = 1,
size = 4.2, fontface = "bold")
# Print plot to PDF
print(p)
}
# Close PDF file
dev.off()
cat("✅ Saved as 'categorical_heatmaps.pdf' — each variable on its own page.\n")
getwd()
setwd("C:/Users/vhuta/Desktop/OralSmart - Data Analysis/R_Data_Analysis/contingency_table")
library(dplyr)
library(ggplot2)
training_data <- read.csv("training_data.csv")
# Target variable
target_var <- "risk_level"
# Convert numeric variables with <=10 unique values to factors
training_data <- training_data %>%
mutate(across(where(is.numeric), ~ if (n_distinct(.) <= 10) factor(.) else .))
# Identify categorical variables (excluding target)
categorical_vars <- setdiff(
names(training_data)[sapply(training_data, is.factor)],
target_var
)
library(gridExtra)
for (var in categorical_vars) {
# Create contingency table
tbl <- table(training_data[[var]], training_data[[target_var]])
# Skip if the table is degenerate (zero counts or only one category)
if (min(dim(tbl)) < 2) next
# Perform Chi-square test
chi_res <- chisq.test(tbl)
# Prepare results text
results_text <- paste0(
"Chi-square Test: ", var, " vs ", target_var, "\n",
"Chi-sq = ", round(chi_res$statistic, 3),
", df = ", chi_res$parameter,
", p-value = ", signif(chi_res$p.value, 3)
)
# Create a plot showing observed counts
p <- ggplot(as.data.frame(tbl), aes(x = Var1, y = Freq, fill = Var2)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
title = paste("Chi-square Test:", var, "vs", target_var),
subtitle = results_text,
x = var,
y = "Count",
fill = target_var
) +
theme_minimal()
# Save the plot
ggsave(paste0("chi_square_", var, ".png"), plot = p, width = 7, height = 5)
}
install.packages('xcolor')
